{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/asteroid.js","webpack:///./src/game.js","webpack:///./src/game_view.js","webpack:///./src/index.js","webpack:///./src/moving_object.js","webpack:///./src/util.js"],"names":[],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;AClFA,aAAa,mBAAO,CAAC,gCAAW;AAChC,qBAAqB,mBAAO,CAAC,kDAAoB;;AAEjD;AACA,yB;AACA,qB;AACA;;;AAGA;AACA;AACA;;AAEA;;;;AAIA,0B;;;;;;;;;;;ACjBA,iBAAiB,mBAAO,CAAC,wCAAe;;;AAGxC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,kBAAkB,2BAA2B;AAC7C,wBAAwB,2BAA2B;AACnD;AACA;AACA,uC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA,sB;;;;;;;;;;;AC7EA,aAAa,mBAAO,CAAC,gCAAW;;;AAGhC;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA,0B;;;;;;;;;;;;;ACfA,qBAAqB,mBAAO,CAAC,kDAAoB;AACjD,iBAAiB,mBAAO,CAAC,wCAAe;AACxC,aAAa,mBAAO,CAAC,gCAAW;;AAEhC,aAAa,mBAAO,CAAC,gCAAW;AAChC,iBAAiB,mBAAO,CAAC,0CAAgB;;;AAGzC;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;;;;ACvBD;AACA,aAAa,mBAAO,CAAC,gCAAW;;AAEhC;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA,4BAA4B;AAC5B,iBAAiB;AACjB,oBAAoB;AACpB,+BAA+B;AAC/B,eAAe;;AAEf;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,C;;;AAGA;;;;;;;;;;;;;;;AC9CA;;;AAGA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.js\");\n","const Util = require('./util.js');\r\nconst MovingObject = require('./moving_object.js');\r\n\r\n// MovingObject(pos, vel, radius, color)\r\nAsteroid.COLOR = 'black'; \r\nAsteroid.RADIUS = 20; \r\nAsteroid.MAXSPEED = 10;\r\n\r\n\r\nfunction Asteroid(pos, game){\r\n    MovingObject.call(this, pos, Util.randomVec(Math.random() * Asteroid.MAXSPEED ) , Asteroid.RADIUS, Asteroid.COLOR, game);\r\n}\r\n\r\nUtil.inherits(Asteroid, MovingObject);\r\n\r\n\r\n\r\nmodule.exports = Asteroid;","const Asteroid = require(\"./asteroid.js\");\r\n\r\n\r\nGame.DIMX = 800;\r\nGame.DIMY = 800;\r\nGame.NUM_ASTEROIDS = 10;\r\n\r\nfunction Game() {\r\n    this.asteroids = this.addAsteroids();\r\n}\r\n\r\nGame.prototype.addAsteroids = function () {\r\n    let output = [];\r\n    while (output.length < Game.NUM_ASTEROIDS) {\r\n        output.push(new Asteroid(this.randomPosition(), this));\r\n    }\r\n    return output;\r\n}\r\n\r\nGame.prototype.randomPosition = function() {\r\n    return [(Math.random()* Game.DIMX), (Math.random() * Game.DIMY)];\r\n}\r\n\r\nGame.prototype.draw = function(ctx) {\r\n    ctx.clearRect(0,0,Game.DIMX,Game.DIMY);\r\n    this.asteroids.forEach( (asteroid) => {\r\n        asteroid.draw(ctx);\r\n    });\r\n}\r\n\r\nGame.prototype.move = function() {\r\n    this.asteroids.forEach( (asteroid) => {\r\n        asteroid.move();\r\n    });\r\n}\r\n\r\n// pos = [x,y]\r\nGame.prototype.wrap = function(pos) {\r\n    let posX = pos[0] + Game.DIMX;\r\n    let posY = pos[1] + Game.DIMY;\r\n    return [posX % Game.DIMX, posY % Game.DIMY];\r\n}\r\n\r\n// Logarithmic: log(a^b) = b * log(a)\r\n// Future, better algo = keep priority queue of future collisions and just process the next tone when it's time\r\n// adding one collision to pq is log(n^2) = 2* log(n) ^ 2\r\n// O(n*2) == O(n)  O(n^2) != O(n)\r\n// O(log(n^2)) == O(log(n))\r\n// O(n * log(n)) != O(log(n))\r\n// there exists some k1, the program always takes < k1*log(x^2)\r\n                                                //   2*k1*log(x)\r\n// getting next collision to log(n)\r\n// O(f(x)) : there exists some k such that time < k * f(x) for any x whatsoever\r\n//  500,000 * x^2\r\n// O(log(x))\r\n\r\nGame.prototype.checkCollisions = function() {\r\n    for(let k = 0; k < this.asteroids.length; k++){\r\n        for(let p = k+1; p < this.asteroids.length; p++){\r\n            if (this.asteroids[k].isCollidedWith(this.asteroids[p])){\r\n                this.asteroids[k].collideWith(this.asteroids[p]);\r\n                console.log('removed');              \r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nGame.prototype.step = function() {\r\n    this.move();\r\n    this.checkCollisions();\r\n}\r\n\r\nGame.prototype.remove = function(asteroid) {\r\n    this.asteroids = this.asteroids.filter(ast =>  ast !== asteroid);\r\n}\r\n\r\n\r\nmodule.exports = Game;      ","const Game = require('./game.js');\r\n\r\n\r\nfunction GameView(ctx){\r\n    this.ctx = ctx;\r\n    this.game2 = new Game();\r\n\r\n}\r\n\r\nGameView.prototype.start = function() {\r\n    let that = this;\r\n    setInterval(function (){\r\n        that.game2.step();\r\n        that.game2.draw(that.ctx);\r\n    },20);\r\n}\r\n\r\nmodule.exports = GameView;","\r\n\r\nconst MovingObject = require(\"./moving_object.js\");\r\nconst Asteroid = require('./asteroid.js');\r\nconst Util = require('./util.js');\r\n\r\nconst Game = require('./game.js');\r\nconst GameView = require('./game_view.js');\r\n\r\n\r\nwindow.Game = Game;\r\nwindow.Asteroid = Asteroid;\r\nwindow.MovingObject = MovingObject;\r\nwindow.GameView = GameView;\r\n\r\n// window.gv = new GameView;\r\n\r\n\r\nwindow.addEventListener('DOMContentLoaded', (event) => {\r\n    let element = document.getElementById('game-canvas');\r\n    ctx = element.getContext('2d');\r\n    let gv = new GameView(ctx);\r\n    gv.start();\r\n});\r\n\r\n\r\n\r\n","// const Game = require(\"./game.js\");\r\nconst Util = require('./util.js');\r\n\r\nfunction MovingObject(pos, vel, radius, color, game) {\r\n\r\n    this.pos = pos;\r\n    this.vel = vel;\r\n    this.radius = radius;\r\n    this.color = color;\r\n    this.game = game;\r\n\r\n}\r\n\r\nMovingObject.prototype.draw = function(ctx){\r\n    // circle of radius centered at pos\r\n    // filled with appropriate color\r\n    ctx.beginPath(); // necessary to begin drawing this path\r\n    ctx.arc(this.pos[0],this.pos[1], this.radius, 0, 2 * Math.PI);\r\n    // (circleCenterX, circleCenterY, radius, startAngle, endAngle, counterclockwise(optional))\r\n    ctx.strokeStyle = \"red\"; // optionally sets color of path\r\n    ctx.stroke(); // draws path (default color is black)\r\n    ctx.closePath(); // optional when drawing a circle\r\n    ctx.fillStyle = this.color; // sets color to be filled inside of the path\r\n    ctx.fill(); // fills the interior of the circle (does not work without fillStyle being set)\r\n\r\n}\r\n\r\nMovingObject.prototype.move  = function() {\r\n\r\n    let posX = this.pos[0];\r\n    let posY = this.pos[1];\r\n    let velX = this.vel[0];\r\n    let velY = this.vel[1];\r\n    this.pos = this.game.wrap([posX + velX, posY + velY]);\r\n}\r\n\r\nMovingObject.prototype.isCollidedWith = function(otherObject){\r\n    let distance = Util.distance(this.pos, otherObject.pos);\r\n    let radiusSum = this.radius + otherObject.radius;\r\n    return distance < radiusSum;\r\n}\r\n\r\nMovingObject.prototype.collideWith = function(asteroid) {\r\n    this.game.remove(asteroid);\r\n    this.game.remove(this);\r\n}   \r\n\r\n\r\nmodule.exports = MovingObject;\r\n\r\n","\r\n\r\nconst Util = {\r\n\r\n\r\n    inherits(child, parent) {\r\n        function Surrogate() {};\r\n        Surrogate.prototype = parent.prototype;\r\n        child.prototype = new Surrogate();\r\n        child.prototype.constructor = child;\r\n    },\r\n\r\n    randomVec(length) {\r\n        const deg = 2 * Math.PI * Math.random();\r\n        return Util.scale([Math.sin(deg), Math.cos(deg)], length);\r\n    },\r\n\r\n    // Scale the length of a vector by the given amount.\r\n\r\n    scale(vec, m) {\r\n        return [vec[0] * m, vec[1] * m];\r\n    },\r\n\r\n    distance(posA, posB){\r\n        let deltaX = posB[0] - posA[0];\r\n        let deltaY = posB[1] - posA[1];\r\n\r\n        return Math.sqrt(deltaX * deltaX + deltaY * deltaY);\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = Util;\r\n"],"sourceRoot":""}